
type Client {
    id: ID
    nom: String
    prenom: String
    email: String
    telephone: String
}

type Chambre {
    id: ID
    type: String
    prix: Float
    disponible: Boolean
}

type Reservation {
    id: ID
    client: Client
    chambre: Chambre
    dateDebut: String
    dateFin: String
    preferences: String
}

type Query {
    getAllClients: [Client]
    getClientById(id: ID): Client
    getAllChambres: [Chambre]
    getChambreById(id: ID): Chambre
    getAllReservations: [Reservation]
    getReservationById(id: ID): Reservation
}


type Mutation {
    createClient(client: ClientRequest): Client
    createChambre(chambre: ChamberRequest): Chambre
    createReservation(reservation: ReservationRequest): Reservation
    updateClient(id: ID, client: ClientRequest): Client
    updateChambre(id: ID,chambre : ChamberRequest): Chambre
    updateReservation(id: ID,reservation: ReservationRequest): Reservation
    deleteClient(id: ID): Boolean
    deleteChambre(id: ID): Boolean
    deleteReservation(id: ID): Boolean
}

input ClientRequest{
    nom: String
    prenom: String
    email: String
    telephone: String
}
input ChamberRequest{
    type: String
    prix: Float
    disponible: Boolean
}
input ReservationForClient{
    id: ID
}
input ReservationForRoom{
    id: ID
}
input ReservationRequest{
    client: ReservationForClient
    chambre: ReservationForRoom
    dateDebut: String
    dateFin: String
    preferences: String
}